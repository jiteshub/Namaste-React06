




Namaste React Theory Ep 2 assignment notes

What is `NPM`?
npm is the world's largest software registry.
npm is the default package manager for the JavaScript runtime environment Node.js 
and is included as a recommended feature in the Node.js installer.


● - What is `Parcel/Webpack`? Why do we need it?
Bundlers are tools that help you optimize and organize your web development projects by transforming, bundling, and minifying your code and assets.
Webpack and Parcel are both great bundlers that can help you improve your web development workflow.

Parcel is a web application bundler. that takes all your code files (like HTML, CSS, and JavaScript) and combines them into a single file or a few files.
Zero Configuration:

Why do we need it?
Here are some key features of a parcel in web development:

Bundling: Parcel takes all your HTML, CSS, JavaScript, and other files, and combines them into a smaller number of files. 
This makes it easier for browsers to load your website quickly.

Efficiency: It automatically optimizes and minifies your code, making it more efficient and faster to load. 
Smaller file sizes mean faster load times for your users.

Zero Configuration: Parcel tries to require minimal configuration from developers. 
This means you can get started quickly without spending a lot of time setting up build tools.

Support for Modern Web Technologies: Parcel supports the latest web development technologies, making it easy for developers to use modern features and frameworks 
in their projects.

Hot Module Replacement (HMR): With HMR, you can see changes in your code instantly without having to manually refresh the entire page. 
This speeds up the development process.

Code Splitting: Parcel allows you to split your code into smaller chunks, loading only what is needed for a particular page or feature.
This can improve the performance of your website.

Automatic Asset Resolution: Parcel automatically resolves and bundles various types of assets, such as images, fonts, and stylesheets. 
This makes it easier for developers, as they don't have to manually configure asset handling.

Built-in Development Server: Parcel comes with a built-in development server, allowing developers to preview their projects locally during development. 
This server automatically reloads the page when changes are made, providing a seamless development experience.

In essence, a parcel simplifies the process of preparing your code for the web, making it more efficient, faster, and easier for developers to work with.



● - What is `.parcel-cache`
parcel-cache` is a directory generated by the Parcel bundler, serving as a cache for storing intermediate build results. 
It enhances the development workflow by speeding up subsequent builds and optimizing resource usage.

● - What is `npx` ?
NPX stands for Node Package eXecute. It is simply an NPM package runner. 
It allows developers to execute any Javascript Package available on the NPM registry without even installing it.

● - What is difference between `dependencies` vs `devDependencies`
"dependencies" : Packages required by your application in production. "
dev-Dependencies" : Packages that are only needed for local development and testing.


● - What is Tree Shaking?
tree shaking is a dead code elimination technique that is applied when optimizing code.
Parcel statically analyzes the imports and exports of each module, and removes everything that isn't used.
This is called "tree shaking" or "dead code elimination".


● - What is Hot Module Replacement?
(HMR)-  Hot Module Replacement is a feature that improves the development experience by updating modules in the browser at runtime without needing a whole page refresh. 
This means that application state can be maintained as you change small things in your code.

● - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
Bundling

Image Optimization

Tree Shaking :Parcel statically analyzes the imports and exports of each module, and removes everything that isn't used.
This is called "tree shaking" or "dead code elimination"
.
Hot Module Replacement is a feature that improves the development experience by updating modules in the browser at runtime without needing a whole page refresh. 
This means that application state can be maintained as you change small things in your code.

Code Splitting: Parcel allows you to split your code into smaller chunks, loading only what is needed for a particular page or feature.
This can improve the performance of your website.





● - What is `.gitignore`? What should we add and not add into it?
The .gitignore file is a text file that tells Git which files or folders to ignore in a project.
ignore files generated by the OS, the IDE you are working on
Some common examples are: dependency caches, such as the contents of /node_modules or /packages. compiled code, such as .o , .pyc , and .class files.


● - What is the difference between `package.json` and `package-lock.json`
package.json:

It is the main configuration file for your Node.js project.
It includes metadata about your project, such as its name, version, entry point, and most importantly, the list of dependencies your project needs to run.
The dependency versions specified in package.json can be ranges, allowing for flexibility in updating dependencies.

package-lock.json:

It is automatically generated when you run npm install project dependencies.
It is a more specific and detailed record of the exact versions of each dependency and its transitive dependencies (dependencies of dependencies) that were installed.
This file helps ensure that every member of your development team or anyone else working on the project installs the exact same versions of dependencies, 
reducing the chances of version conflicts and ensuring consistency across environments.


● - Why should I not modify `package-lock.json`?
Modifying package-lock.json is discouraged because it's an automatically generated file meant to ensure dependency consistency. 
Editing it manually can lead to unintended consequences, such as introducing version conflicts, breaking reproducibility, 
and causing inconsistencies across development environments. 
The file is a precise record of the dependencies and their versions, crucial for collaboration and deployment. 
Modifying it can compromise the reliability of your project's dependencies, potentially leading to compatibility issues and making it harder for 
others to reproduce the exact environment. It's best to let the package manager handle dependencies to maintain stability and consistency.

● - What is `node_modules` ? Is it a good idea to push that on git?
The node_modules folder is a folder that is created when you install packages using the Node Package Manager (npm). 
It stores the packages and their dependencies that your project requires.





● - What is the `dist` folder?
The /dist stands for distributable.
The /dist folder contains the minimized version of the source code.
The code present in the /dist folder is actually the code which is used on production web applications.
Along with the minified code, the /dist folder also comprises of all the compiled modules that may or may not be used with other systems.
dist folder is the build folder which contains all the files and folders which can be hosted in server.

● - What is `browserlists`
browserslist is a configuration file that determines which browsers your project should support

------------------------------------------------------------------------------------

Namaste reap ep2:

npm-> npm is the package manager for JavaScript.

npm init -> use to create package.json

package.json -> used to manage dependencies.

dependencies are of two types:
Dev-dependencies - which are use for development phase.
Dependencies - Which are use for development as well as production.

npm install -D parcel-> -D represents the package is being installed as Dev-dependencies 
for development purpose.

package-lock.json -> keeps track of exact version of package/dependencies installed for 
project and also makes sure that same are delivered for production

"^2.12.0" - ^ this symbol is know as carel  it helps to update the installed package 
or dependencies.
^ caret updates to minor version of dependencies automatically.

~ this symbol is know as Tilde which is responsible for updating  and install major 
version of dependencies.

Node_modules is like a collection / database of packages/dependencies required for 
our project.

npm install -> install Node_modules

Transitive dependencies: In simple terms, a transitive dependency occurs when one package 
you rely on needs another package, and that other package needs a third package. 
It's like a chain reaction of dependencies.

