const heading = React.createElement('h1',{},'Hello world from react') 

//The line `const heading = React.createElement('h1',{},'Hello world from react')` is creating a React element representing an `<h1>` heading with the text content "Hello world from react".

props = 
children: "Hello world from react" +
attribute :{id:'root'}

React.createElement('tag you want to create',{attribute to the tag},'Hello world from react'->Message to add in tag)


const root = ReactDOM.createRoot(document.getElementById('root'));

//`const root = ReactDom.createRoot(document.getElementById('root'));` is creating a rootReact component that will be rendered into the HTML element with the id "root". 


root.render(heading); -> 

root.render(heading);` is instructing the root React component to render the React element
`heading` into the HTML element with the id "root". 
This will display the heading "Hello world from react" on the webpage within the specified HTML element. 



-----------------------------------------

* This JavaScript code is creating a nested structure of HTML elements using React's `createElement`function.

 The code creates a parent `div` element with an id of 'parent', which contains a child `div` element with an id of 'child'. 
 
 Inside the child `div`, there are two sibling elements: an `h1`
element with the text 'I am h1 tag' and an `h2` element with the text 'I am h2 tag'. */

const siblings = React.createElement(
    'div',
    {id:'parent'},

    React.createElement(
        'div',
        {id:'child'},
        
        [React.createElement('h1',{},'I am h1 tag'),React.createElement('h2',{},'I am h2 tag')]
    )
);

console.log(siblings)

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(siblings)

-----------------------------------------
Nested element using react
/* The `const parent` code snippet is creating a nested structure of HTML elements using React's
`createElement` function. */

const parent = React.createElement(
    'div',
    {id:'parent'},

    [React.createElement(
        'div',
        {id:'child 1'},
        
        [React.createElement('h1',{},'I am h1 tag'),React.createElement('h2',{},'I am h2 tag')]
    ),
      React.createElement(
        'div',
        {id:'child 2'},
        [React.createElement('h1',{},'I am h1 tag'),React.createElement('h2',{},'I am h2 tag')]
    )]

);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(parent)

console.log(parent)

-------------------------------------------------------------------------------------------
Namaste reap ep2:

npm-> npm is the package manager for JavaScript.

npm init -> use to create package.json

package.json -> used to manage dependencies.

dependencies are of two types:
Dev-dependencies - which are use for development phase.
Dependencies - Which are use for development as well as production.

npm install -D parcel-> -D represents the package is being installed as Dev-dependencies 
for development purpose.

package-lock.json -> keeps track of exact version of package/dependencies installed for 
project and also makes sure that same are delivered for production

"^2.12.0" - ^ this symbol is know as carel  it helps to update the installed package 
or dependencies.
^ caret updates to minor version of dependencies automatically.

~ this symbol is know as Tilde which is responsible for updating  and install major 
version of dependencies.

Node_modules is like a collection / database of packages/dependencies required for 
our project.

npm install -> install Node_modules

Transitive dependencies: In simple terms, a transitive dependency occurs when one package 
you rely on needs another package, and that other package needs a third package. 
It's like a chain reaction of dependencies.






 