element created using Core React:

const heading = React.createElement('h1',{},'Hello world from react') 

//The line `const heading = React.createElement('h1',{},'Hello world from react')` is creating a React element representing an `<h1>` heading with the text content "Hello world from react".

const root = ReactDOM.createRoot(document.getElementById('root'));

//`const root = ReactDom.createRoot(document.getElementById('root'));` is creating a rootReact component that will be rendered into the HTML element with the id "root". 

root.render(heading); -> 

root.render(heading);` is instructing the root React component to render the React element
`heading` into the HTML element with the id "root". 
This will display the heading "Hello world from react" on the webpage within the specified HTML element. 

props = 
children: "Hello world from react" +
attribute :{id:'root'}

React.createElement('tag you want to create',{attribute to the tag},'Hello world from react'->Message to add in tag)

------------------------------------------------------------------------------------
//Siblings in React element

* This JavaScript code is creating a nested structure of HTML elements using React's `createElement`function.

 The code creates a parent `div` element with an id of 'parent', which contains a child `div` element with an id of 'child'. 
 
 Inside the child `div`, there are two sibling elements: an `h1`
element with the text 'I am h1 tag' and an `h2` element with the text 'I am h2 tag'. */

const siblings = React.createElement(
    'div',
    {id:'parent'},

    React.createElement(
        'div',
        {id:'child'},
        
        [React.createElement('h1',{},'I am h1 tag'),React.createElement('h2',{},'I am h2 tag')] //siblings
    )
);

console.log(siblings)

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(siblings)

-----------------------------------------
Nested element using react
/* The `const parent` code snippet is creating a nested structure of HTML elements using React's
`createElement` function. */

const parent = React.createElement(
    'div',
    {id:'parent'},

    [React.createElement(
        'div',
        {id:'child 1'},
        
        [React.createElement('h1',{},'I am h1 tag'),React.createElement('h2',{},'I am h2 tag')]
    ),
      React.createElement(
        'div',
        {id:'child 2'},
        [React.createElement('h1',{},'I am h1 tag'),React.createElement('h2',{},'I am h2 tag')]
    )]

);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(parent)

console.log(parent)

------------------------------------------------------------------------------------
React element  using JSX

const jsxHeading  = <h1>This is React element using JSX</h1>

/* This JavaScript code is using React to create a simple JSX element, which is a heading element
`<h1>` with the text "This is React element using JSX". */

const jsxHeading = <h1>This is React element using JSX</h1>
console.log(jsxHeading);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(jsxHeading);

------------------------------------------------------------------------------------
/**React functional component:

 The TitleComponent function is a React functional component that returns an h1 element with the text
"This is React functional component".
returns A React functional component named `TitleComponent` is being returned. 
 */
 
const TitleComponent = () =>{
    return <h1>This is React functional component</h1>
};

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(<TitleComponent/>);
------------------------------------------------------------------------------------
/ anouther way creating react functional component
 *The above function is a React functional component called TitleComponent that renders a parent div
 * with an h1 element inside.
 */
const TitleComponent = () =>(
    <div id="Parent">
        <h1>This is React functional component</h1>
    </div> 
);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(<TitleComponent/>);

-----------------------------------------------------------------------------------
adding data of react element into React functional component:

const jsxHeading = (
    <h1>This is React element using JSX</h1>
);
console.log(jsxHeading);


const TitleComponent = () =>(
    <div id="Parent">
        {jsxHeading} --> embeding react element 
        <h1>This is React functional component</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat nam fugit quis at explicabo repellendus deleniti quas facere saepe temporibus.</p>
    </div> 
);

------------------------------------------------------------------------------------
Adding data of one react function into anouther

const Heading = ()=>(
    <h1>This is React element using JSX</h1>
);
console.log(Heading);


const TitleComponent = () =>(
    <div id="Parent">
        <Heading/> //component Composition
        <h1>This is React functional component</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat nam fugit quis at explicabo repellendus deleniti quas facere saepe temporibus.</p>
    </div> 
);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(<TitleComponent/>);
------------------------------------------------------------------------------------
Adding data from component to element to function another way:

const Heading = ()=>(
    <h1>This is React element using JSX</h1>
);
console.log(Heading);


const TitleComponent = () =>(
    <div id="Parent">
        {Heading()} //component Composition
        <h1>This is React functional component</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugiat nam fugit quis at explicabo repellendus deleniti quas facere saepe temporibus.</p>
    </div> 
);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(<TitleComponent/>);
------------------------------------------------------------------------------------
Destructured Props:

/* The `const RestaurantCard = ({resname , Cuisine, rating , delivery}) => {` is defining a functional
component in React called `RestaurantCard`. This component takes in an object as its props with
properties `resname`, `Cuisine`, `rating`, and `delivery`. */

 const RestaurantCard = ({resname , Cuisine, rating , delivery}) => {
  return (
    <div className="res-card">
      <div className="imgBx">
        <img src={motichur} alt="Motichur_Laddu" className="res-img" />
      </div>
      <div className="content">
        <h3>{resname}</h3>
        <h4>{Cuisine}</h4>
        <h4>{rating}</h4>
        <h4>{delivery}</h4>
      </div>
    </div>
  );
};
const Body = () => {
  return (
    <div className="body">
      <div className="search">Search</div>
      <div className="res-container">
        <RestaurantCard
          resname="Kaka Halwai"
          Cuisine="Cuisine: Laddoo"
          rating="Rating: 4.3"
          delivery="Delivery: 30min"
        />
        <RestaurantCard
          resname="Kaka Halwai"
          Cuisine="Cuisine: Samosa"
          rating="Rating: 4.3"
          delivery="Delivery: 30min"
        />
      </div>
    </div>
  );

-------------------------------------------------------------------------------------
Normal Props:

/**
 * The code defines a React component for a restaurant card and a body component that displays multiple
 * restaurant cards with different information.
 
 * @param props - In the `RestaurantCard` component, the `props` object contains the following
 * properties:
 * @returns The code snippet provided is a React component that defines a `RestaurantCard` component
 * and a `Body` component.
 */
const RestaurantCard = (props) => {
  return (
    <div className="res-card">
      <div className="imgBx">
        <img src={motichur} alt="Motichur_Laddu" className="res-img" />
      </div>
      <div className="content">
        <h3>{props.resname}</h3>
        <h4>{props.Cuisine}</h4>
        <h4>{props.rating}</h4>
        <h4>{props.delivery}</h4>
      </div>
    </div>
  );
};
const Body = () => {
  return (
    <div className="body">
      <div className="search">Search</div>
      <div className="res-container">
        <RestaurantCard
          resname="Kaka Halwai"
          Cuisine="Cuisine: Laddoo"
          rating="Rating: 4.3"
          delivery="Delivery: 30min"
        />
        <RestaurantCard
          resname="Kaka Halwai"
          Cuisine="Cuisine: Samosa"
          rating="Rating: 4.3"
          delivery="Delivery: 30min"
        />
      </div>
    </div>
  );
};
-----------------------------------------------------------------------------------
Props destructuring part 2
/**
 * The RestaurantCard function takes in props and destructures the properties resname, Cuisine,delivery, and rating from the props object.
 * @param props - props is an object that contains the following properties:
 */

const RestaurantCard = (props) => {
  const{resname,Cuisine,delivery,rating} = props --> destructuring of props

  return (
    <div className="res-card">
      <div className="imgBx">
        <img src={motichur} alt="Motichur_Laddu" className="res-img" />
      </div>
      <div className="content">
        <h3>{resname}</h3>
        <h4>{Cuisine}</h4>
        <h4>{rating}</h4>
        <h4>{delivery}</h4>
      </div>
    </div>
  );
};
const Body = () => {
  return (
    <div className="body">
      <div className="search">Search</div>
      <div className="res-container">
        <RestaurantCard
          resname="Kaka Halwai"
          Cuisine="Cuisine: Laddoo" ---->Props (properties of RestaurantCard)
          rating="Rating: 4.3"
          delivery="Delivery: 30min"
        />
        <RestaurantCard
          resname="Kaka Halwai"
          Cuisine="Cuisine: Samosa"
          rating="Rating: 4.3"
          delivery="Delivery: 30min"
        />
      </div>
    </div>
  );
};

-----------------------------------------------------------------------------------
Dynamic ui using props :

/* The code snippet provided defines an array `reslist` containing objects representing different food
items with properties like id, image URL, category, product name, price, and quantity. */

const reslist = [
    {
      "id": 118,
      "image": "https://i.postimg.cc/634bfgPW/mali-sandwich.jpg",
      "Category": "Bengali sweets",
      "Product_name": "Malai Sandwich",
      "price": 240,
      "quantity": "500g"
    },
    {
      "id": 106,
      "image": "https://i.postimg.cc/RhRc90HP/kaju-katli2.jpeg",
      "Category": "Dryfruit sweets",
      "Product_name": "Kaju Katli",
      "price": 650,
      "quantity": "500g"
    },
    {
      "id": 101,
      "image": "https://i.postimg.cc/FFSY514G/Lasun-Sev.jpg",
      "Category": "Namkeen",
      "Product_name": "Lasun Sev",
      "price": 70,
      "quantity": "500g"
    },
    {
      "id": 120,
      "image": "https://i.postimg.cc/J76czPYK/Gulab-Barfi.jpg",
      "Category": "Barfi",
      "Product_name": "Gulab barfi",
      "price": 240,
      "quantity": "500g"
    },
    {
      "id": 107,
      "image": "https://i.postimg.cc/KYJmySqZ/badam-halwa.jpeg",
      "Category": "Dryfruit sweets",
      "Product_name": "Badam halwa",
      "price": 820,
      "quantity": "500g"
    },
    {
      "id": 123,
      "image": "https://i.postimg.cc/RC6Ls2Tf/motichure-laddu-1.jpg",
      "Category": "Traditional sweets",
      "Product_name": "Motichur laddu",
      "price": 350,
      "quantity": "500g"
    }
  ];

const RestaurantCard = (props) => {
  const { resData } = props;

  const{image,Product_name,price,quantity} = resData

  return (
    <div className="res-card">
      <div className="imgBx">
        <img src={image} alt="Motichur_Laddu" className="res-img" />
      </div>
      <div className="content">
        <h3>Product: <br />{Product_name}</h3>
        <h4>Price: {price}</h4>
        <h4>Quantity {quantity}</h4>
      </div>
    </div>
  );
};
const Body = () => {
  return (
    <div className="body">
      <div className="search">Search</div>
      <div className="res-container">
        <RestaurantCard resData={reslist[0]} />
        <RestaurantCard resData={reslist[1]} />
        <RestaurantCard resData={reslist[2]} />
        <RestaurantCard resData={reslist[3]} />
        <RestaurantCard resData={reslist[4]} />
      </div>
    </div>
  );
};

const AppLayout = () => {
  return (
    <div className="App">
      <Header />
      <Body />
    </div>
  );
};

-----------------------------------------------------------------------------------
To create multiple elements using .map():

/* The code `{reslist.map((Restaurant)=>(<RestaurantCard resData={Restaurant}/>))}` is using
        the `map` method to iterate over each object in the `reslist` array. For each object
        (representing a food item), it creates a `RestaurantCard` component and passes the data of that specific food item as props to the `RestaurantCard` component. 
        This way, it dynamically generates multiple instances of the `RestaurantCard` component, each displaying information
        about a different food item from the `reslist` array. */